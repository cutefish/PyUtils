#!/usr/bin/python

import sys
import imp
import os
import pyutils
import pyutils.common.importutils as iu
from pyutils.common.clirunnable import CliRunnable

#search available packages
if os.environ['PYUTILSHOME'] == None:
    print 'PyUtils not properly set up, please run setup.py again'
    sys.exit(-1)
pkgPath = os.environ['PYUTILSHOME'] + '/lib'
if pkgPath not in sys.path:
    print 'PyUtils not in system path, perhaps need "source ~/.bashrc" '
    sys.exit(-1)

#check for available modules
availableModules = []
for path in os.listdir(pkgPath + '/pyutils'):
    try:
        imp.find_module(path, pyutils.__path__)
        availableModules.append(path)
    except ImportError:
        pass

def printUsage():
    print "pyutils <module name> [module args]"
    print "available modules: ", availableModules

if len(sys.argv) < 2:
    printUsage()
    sys.exit(-1)

moduleName = 'pyutils.' + sys.argv[1]
try:
    m = iu.loadModule(moduleName)
except ImportError as ie:
    lname, m, n, e = ie.args
    print "Error importing module: " + lname + "." + n
    print "cause: " + str(e)
    print "loaded: " + str(m)
    sys.exit(-1)

if m.__file__.endswith('__init__.py') or m.__file__.endswith('__init__.pyc'):
    #a package file
    try:
        def printModuleUsage():
            print ("available modules:\n  " +
                   "\n  ".join(key.ljust(20) + ": " + m.modules[key]
                               for key in m.modules))
        printModuleUsage()
    except AttributeError:
        print "modules not exposed for package: " + m.__name__
        sys.exit(-1)
else:
    cls = iu.loadClass(moduleName, interface=CliRunnable)
    if cls == None:
        print "No clirunnable class defined in module: " + m.__name__
        sys.exit(-1)
    obj = cls()
    obj.run(sys.argv[2:])
