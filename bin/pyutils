#!/usr/bin/python

import sys
import imp
import os
import pyutils.common.reflectutils as ru
import pyutils.common.clirunnable as clir

#search available packages
if os.environ['PYUTILSHOME'] == None:
    print 'PyUtils not properly set up, please run setup.py again'
    sys.exit(-1)

pkgDir = os.environ['PYUTILSHOME'] + '/pyutils'

null, pkgPath, desc = imp.find_module('pyutils')
pyutils = imp.load_module('pyutils', null, pkgPath, desc)

availableModules = []
for path in os.listdir(pkgDir):
    try:
        fileObj, pathname, desc = imp.find_module(path, pyutils.__path__)
        availableModules.append(path)
    except ImportError:
        pass

def printUsage():
    print "pyutils <module name> [module args]"
    print "available modules: ", availableModules

if len(sys.argv) < 2:
    printUsage()
    sys.exit(-1)

try:
    m = ru.loadPkgModule(sys.argv[1], pyutils)
except ImportError as ie:
    print "Error importing module: " + ie.args[0]
    print "cause: " + str(ie.args[1])
    sys.exit(-1)

if m.__file__.endswith('__init__.py') or m.__file__.endswith('__init__.pyc'):
    #a package file
    try:
        def printModuleUsage():
            print ("available modules:\n  " +
                   "\n  ".join(key.ljust(20) + ": " + m.modules[key]
                               for key in m.modules))
        printModuleUsage()
    except AttributeError:
        print "modules not exposed for package: " + m.__name__
        sys.exit(-1)
else:
    cls = ru.getSubClass(m, clir.Clirunnable)
    if cls == None:
        print "No clirunnable class defined in module: " + m.__name__
        sys.exit(-1)
    obj = cls()
    obj.run(sys.argv[2:])
